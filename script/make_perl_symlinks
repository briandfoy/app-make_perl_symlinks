#!/Users/brian/bin/perl
use 5.034;
use utf8;
use warnings;
use experimental qw(signatures);

use File::Basename;
use File::Spec::Functions qw(rel2abs catfile);
use File::Path qw(make_path);
use Perl::Version;
use Antsy qw(:all);

use constant CHECKMARK => bold . text_green . "\x{2714}" . reset;
use constant CROSS     => bold . text_red . "\x{274C}" . reset;

say <<~"HERE";
CHECK: @{[CHECKMARK]}
CROSS: @{[CROSS]}
HERE

exit;
my $links_directory = $ARGV[1] // catfile( $ENV{HOME}, 'bin', 'perls' );
make_path $links_directory;
die colored( ['red'], "$links_directory does not exist!" ) . "\n"
	unless -d $links_directory;


cleanup_dead_symlinks( $links_directory );

sub cleanup_dead_symlinks ( $dir ) {
	my @dead_links =
		grep { defined readlink($_) }
		grep { -l }
		map { rel2abs( $_, $dir ) }
		glob( '*' );

	foreach my $link ( @dead_links ) {

		my $rc = unlink $link;

		}
	unlink @dead_links;
	}

sub get_perl ( $dir ) {
	cleanup_source_dir( $dir );
	unless( -e catfile( $dir, 'bin' ) ) {
		say colored( ['magenta'], "\tNo bin/ directory in <$dir>. Skipping!" );
		return;
		}

	my @perls = glob( catfile( $dir, qw( bin perl5* ) ) );
	$perls[0];
	}

sub cleanup_source_dir ( $dir ) {
	my( $version ) = $dir =~ m{/perl-(.+?)(?:/|$)};
	my $perl  = catfile( $dir, 'bin', 'perl' );
	my $vperl = $perl . $version;

	my @tuples = [ $perl, $vperl ];
	push @tuples, [ reverse $tuples[0]->@* ];

	foreach my $t ( @tuples ) {
		next unless( -e $t->[0] and !(-e $t->[1]) );
		warn "Symlinking <$t->[0]> to <$t->[1]>";
		symlink $t->[0], $t->[1];
		}

	$vperl;
	}

sub get_version ( $perl_path ) {
	my $hash;

	say "perl path is: $perl_path";

	( $hash->{path_version} ) = $perl_path =~ m/(5\.\d+\.\d+)\z/;
	$hash->{full}       = Perl::Version->new( $hash->{path_version} );
	$hash->{rc}         = $perl_path =~ /RC/i;
	$hash->{devel}      = $hash->{full}->version % 2;
	$hash->{version}    = join '.', $hash->{full}->revision, $hash->{full}->version;
	$hash->{subversion} = $hash->{full}->subversion;

	return $hash;
	}

sub make_links ( $dir, $version_string, $links_dir = $links_directory ) {
	foreach my $bin ( glob( catfile( $dir, 'bin', '*' ) ) ) {
		my $link_basename = do {
			my $basename = basename( $bin );
			if( $basename =~ m/5\.\d+\.\d+\z/) { $basename }
			else                               { "$basename$version_string" }
			};

		my $link = catfile( $links_directory, $link_basename );
		say colored( ['green'], "    linking $bin => $link" );
		next;

		unless( -e $link ) {
			symlink $bin => $link or
				warn colored( ['red'], "    Could not create bin symlink [$!]: $bin => $link!" )  . "\n";
			}

		}
	}

sub make_latest ( $latest ) {
	my( $dir, $version ) = ( $latest->[0], "$latest->[1]" );

	foreach my $bin ( glob( catfile( $dir, 'bin', '*' ) ) ) {
		my $basename = basename( $bin );
		$basename =~ s/5\.\d+\.\d+\z//;

		my $link = catfile( $links_directory, $basename );
		say colored( ['green'], "    linking $bin => $link" );
		if( -e $link ) {
			warn "Link <$link> exists\n";
			unlink $link or warn colored( ['red'], "Could not unlink <$link>: $!" ) . "\n";
			}
		warn "Link <$link> still exists\n" if -e $link;
		symlink $bin, $link or
			warn colored( ['red'], "\t\t\tCould not create latest symlink [$!]: <$bin> => <$link>!" )  . "\n";
		}
	}

my $perls_glob        = catfile( $ARGV[0] // '/usr/local/perls', 'perl*' );
my @perls_directories = glob( $perls_glob );

my $latest = [ undef, [qw(0 0 0)], undef ];
DIRECTORY: foreach my $directory ( @perls_directories ) {
	say colored( ['green'], "=== Processing $directory" );

	my $perl = get_perl( $directory );
	next unless $perl;

	my @this_parts = split /\./, basename($perl) =~ s/[^0-9.]//rg;
	my $can_be_latest = ( $perl !~ m/RC/ || ($this_parts[1] % 2) == 1 );

	my $is_latest  = (
		$this_parts[1] > $latest->[1][1]
			or
		($this_parts[1] == $latest->[1][1] and $this_parts[2] > $latest->[1][2])
		);

	if( $is_latest ) {
		#say colored( ['yellow'], sprintf "\t%s is later than %s", join('.',@this_parts), join('.',$latest->[1]->@*) );
		$latest->[0] = $directory;
		$latest->[1] = \@this_parts if $is_latest;
		$latest->[2] = $perl;
		}

	make_links( $directory, join('.',@this_parts) );
	make_latest( $latest );
	}

__END__
my $latest_name = '/Users/brian/bin/perls/perl-latest';
unlink $latest_name;
symlink $latest->[2], $latest_name or warn $!;
